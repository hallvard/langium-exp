/******************************************************************************
 * This file was generated by langium-cli 3.5.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
/* eslint-disable */
import * as langium from 'langium';
export const SosiTerminals = {
    WS: /\s+/,
    ID: /[_a-zA-Z][\w_]*/,
    INT: /[0-9]+/,
    STRING: /"(\\.|[^"\\])*"|'(\\.|[^'\\])*'/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
};
export const Multiplicity = 'Multiplicity';
export function isMultiplicity(item) {
    return reflection.isInstance(item, Multiplicity);
}
export function isName(item) {
    return (typeof item === 'string' && (/[_a-zA-Z][\w_]*/.test(item) || /"(\\.|[^"\\])*"|'(\\.|[^'\\])*'/.test(item)));
}
export function isPropertyKind(item) {
    return item === '@' || item === '#' || item === '^';
}
export const PropertyType = 'PropertyType';
export function isPropertyType(item) {
    return reflection.isInstance(item, PropertyType);
}
export function isQName(item) {
    return typeof item === 'string';
}
export const Type = 'Type';
export function isType(item) {
    return reflection.isInstance(item, Type);
}
export const BuiltinType = 'BuiltinType';
export function isBuiltinType(item) {
    return reflection.isInstance(item, BuiltinType);
}
export const CompositeType = 'CompositeType';
export function isCompositeType(item) {
    return reflection.isInstance(item, CompositeType);
}
export const DomainMapping = 'DomainMapping';
export function isDomainMapping(item) {
    return reflection.isInstance(item, DomainMapping);
}
export const InlineType = 'InlineType';
export function isInlineType(item) {
    return reflection.isInstance(item, InlineType);
}
export const OneOrMoreMultiplicity = 'OneOrMoreMultiplicity';
export function isOneOrMoreMultiplicity(item) {
    return reflection.isInstance(item, OneOrMoreMultiplicity);
}
export const Property = 'Property';
export function isProperty(item) {
    return reflection.isInstance(item, Property);
}
export const SomeMultiplicity = 'SomeMultiplicity';
export function isSomeMultiplicity(item) {
    return reflection.isInstance(item, SomeMultiplicity);
}
export const Specification = 'Specification';
export function isSpecification(item) {
    return reflection.isInstance(item, Specification);
}
export const TypeRef = 'TypeRef';
export function isTypeRef(item) {
    return reflection.isInstance(item, TypeRef);
}
export const ZeroOrMoreMultiplicity = 'ZeroOrMoreMultiplicity';
export function isZeroOrMoreMultiplicity(item) {
    return reflection.isInstance(item, ZeroOrMoreMultiplicity);
}
export const ZeroOrOneMultiplicity = 'ZeroOrOneMultiplicity';
export function isZeroOrOneMultiplicity(item) {
    return reflection.isInstance(item, ZeroOrOneMultiplicity);
}
export class SosiAstReflection extends langium.AbstractAstReflection {
    getAllTypes() {
        return [BuiltinType, CompositeType, DomainMapping, InlineType, Multiplicity, OneOrMoreMultiplicity, Property, PropertyType, SomeMultiplicity, Specification, Type, TypeRef, ZeroOrMoreMultiplicity, ZeroOrOneMultiplicity];
    }
    computeIsSubtype(subtype, supertype) {
        switch (subtype) {
            case BuiltinType:
            case CompositeType: {
                return this.isSubtype(Type, supertype);
            }
            case InlineType:
            case TypeRef: {
                return this.isSubtype(PropertyType, supertype);
            }
            case OneOrMoreMultiplicity:
            case SomeMultiplicity:
            case ZeroOrMoreMultiplicity:
            case ZeroOrOneMultiplicity: {
                return this.isSubtype(Multiplicity, supertype);
            }
            default: {
                return false;
            }
        }
    }
    getReferenceType(refInfo) {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'CompositeType:extends':
            case 'TypeRef:typeRef': {
                return Type;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case BuiltinType: {
                return {
                    name: BuiltinType,
                    properties: [
                        { name: 'mappings', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case CompositeType: {
                return {
                    name: CompositeType,
                    properties: [
                        { name: 'description' },
                        { name: 'extends', defaultValue: [] },
                        { name: 'isAbstract', defaultValue: false },
                        { name: 'kind' },
                        { name: 'mappings', defaultValue: [] },
                        { name: 'name' },
                        { name: 'properties', defaultValue: [] }
                    ]
                };
            }
            case DomainMapping: {
                return {
                    name: DomainMapping,
                    properties: [
                        { name: 'domain' },
                        { name: 'target' }
                    ]
                };
            }
            case InlineType: {
                return {
                    name: InlineType,
                    properties: [
                        { name: 'type' }
                    ]
                };
            }
            case OneOrMoreMultiplicity: {
                return {
                    name: OneOrMoreMultiplicity,
                    properties: [
                        { name: 'spec' }
                    ]
                };
            }
            case Property: {
                return {
                    name: Property,
                    properties: [
                        { name: 'description' },
                        { name: 'kind' },
                        { name: 'mappings', defaultValue: [] },
                        { name: 'multiplicity' },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case SomeMultiplicity: {
                return {
                    name: SomeMultiplicity,
                    properties: [
                        { name: 'lower' },
                        { name: 'upper' }
                    ]
                };
            }
            case Specification: {
                return {
                    name: Specification,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'types', defaultValue: [] }
                    ]
                };
            }
            case TypeRef: {
                return {
                    name: TypeRef,
                    properties: [
                        { name: 'typeRef' }
                    ]
                };
            }
            case ZeroOrMoreMultiplicity: {
                return {
                    name: ZeroOrMoreMultiplicity,
                    properties: [
                        { name: 'spec' }
                    ]
                };
            }
            case ZeroOrOneMultiplicity: {
                return {
                    name: ZeroOrOneMultiplicity,
                    properties: [
                        { name: 'spec' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}
export const reflection = new SosiAstReflection();
//# sourceMappingURL=ast.js.map